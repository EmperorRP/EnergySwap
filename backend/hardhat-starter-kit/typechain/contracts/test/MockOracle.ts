/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockOracleInterface extends utils.Interface {
  functions: {
    "EXPIRY_TIME()": FunctionFragment;
    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "fulfillOracleRequest(bytes32,bytes32)": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXPIRY_TIME"
      | "cancelOracleRequest"
      | "fulfillOracleRequest"
      | "getChainlinkToken"
      | "onTokenTransfer"
      | "oracleRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXPIRY_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleRequest",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPIRY_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;

  events: {
    "CancelOracleRequest(bytes32)": EventFragment;
    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOracleRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
}

export interface CancelOracleRequestEventObject {
  requestId: string;
}
export type CancelOracleRequestEvent = TypedEvent<
  [string],
  CancelOracleRequestEventObject
>;

export type CancelOracleRequestEventFilter =
  TypedEventFilter<CancelOracleRequestEvent>;

export interface OracleRequestEventObject {
  specId: string;
  requester: string;
  requestId: string;
  payment: BigNumber;
  callbackAddr: string;
  callbackFunctionId: string;
  cancelExpiration: BigNumber;
  dataVersion: BigNumber;
  data: string;
}
export type OracleRequestEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  OracleRequestEventObject
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export interface MockOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOracleRequest(
    _requestId: PromiseOrValue<BytesLike>,
    _payment: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    _expiration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleRequest(
    _requestId: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  onTokenTransfer(
    _sender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: PromiseOrValue<string>,
    _payment: PromiseOrValue<BigNumberish>,
    _specId: PromiseOrValue<BytesLike>,
    _callbackAddress: PromiseOrValue<string>,
    _callbackFunctionId: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _dataVersion: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelOracleRequest(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): CancelOracleRequestEventFilter;
    CancelOracleRequest(
      requestId?: PromiseOrValue<BytesLike> | null
    ): CancelOracleRequestEventFilter;

    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)"(
      specId?: PromiseOrValue<BytesLike> | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      specId?: PromiseOrValue<BytesLike> | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
  };

  estimateGas: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
